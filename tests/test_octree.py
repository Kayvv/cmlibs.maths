import unittest

from cmlibs.maths.octree import Octree


class OctTreeTestCase(unittest.TestCase):

    def test_oct_tree_1(self):
        pts = [[0.5002720342505129, 0.049999999999999996, -0.08501700857389402],
               [0.2645697738549972, -0.35824829046386303, 0.2483163247594392]]

        o = Octree()
        o.insert_object_at_coordinates(pts[0], 1)
        o.insert_object_at_coordinates(pts[1], 2)

        self.assertEqual(1, o.find_object_by_coordinates(pts[0]))
        self.assertEqual(2, o.find_object_by_coordinates(pts[1]))

    def test_oct_tree_2(self):
        pts = [[-0.2934372873144786, -0.40824829046386296, -0.08501700857389399],
               [-0.30539112847838207, -0.47895555285030167, -0.15471008125537822],
               [-0.24765910625478924, -0.4789555528487444, -0.23635549006530096],
               [-0.17796723347655352, -0.40824829046386296, -0.24831632475943927],
               [-0.16601339231265005, -0.3375410280774243, -0.178623252077955],
               [-0.22374541453624286, -0.33754102807898145, -0.09697784326803233],
               [0.17796723347655338, -0.408248290463863, 0.2483163247594392],
               [0.24765910625759371, -0.47895555285030167, 0.2363554900632418],
               [0.3053911284793884, -0.4789555528487444, 0.15471008125204752],
               [0.29343728731447843, -0.408248290463863, 0.08501700857389394],
               [0.22374541453343808, -0.3375410280774243, 0.09697784327009142],
               [0.16601339231164347, -0.33754102807898156, 0.17862325208128554]]

        o = Octree()
        for i, pt in enumerate(pts):
            o.insert_object_at_coordinates(pt, i + 1)

        for i, pt in enumerate(pts):
            self.assertEqual(i + 1, o.find_object_by_coordinates(pt))

        nd1 = [[-0.04936372890878149, -0.08550048652106605, -0.03490542745605377],
               [0.027648784957331453, -0.04277813171414004, -0.0914935840944021],
               [0.07704471667898151, 0.04277813171695018, -0.05656538580855996],
               [0.04936372890878152, 0.08550048652106605, 0.03490542745605376],
               [-0.027648784957331436, 0.04277813171413982, 0.09149358409440221],
               [-0.07704471667898151, -0.042778131716949955, 0.05656538580856002],
               [0.04936372890878148, -0.08550048652106605, 0.03490542745605377],
               [0.07704471667850743, -0.04277813171413998, -0.05656538581133083],
               [0.027648784954560728, 0.04277813171695016, -0.09149358409392554],
               [-0.04936372890878149, 0.0855004865210661, -0.03490542745605379],
               [-0.07704471667850739, 0.04277813171413971, 0.05656538581133116],
               [-0.027648784954560936, -0.04277813171694988, 0.09149358409392555]]

        self.assertIsNone(o.find_object_by_coordinates(nd1[0]))
        self.assertEqual(11, o.find_nearest_object_by_coordinates([0.22374541453343808, -0.337541028078, 0.09697784327009142]))
        self.assertEqual(6, o.find_nearest_object_by_coordinates([-0.22374541453343808, -0.337541028078, -0.09697784327009142]))

    def test_oct_tree_insert_existing(self):
        pts = [[0.5002720342505129, 0.049999999999999996, -0.08501700857389402],
               [0.2645697738549972, -0.35824829046386303, 0.2483163247594392]]

        o = Octree()
        o.insert_object_at_coordinates(pts[0], 1)
        o.insert_object_at_coordinates(pts[1], 2)

        self.assertEqual(1, o.find_object_by_coordinates(pts[0]))
        self.assertEqual(2, o.find_object_by_coordinates(pts[1]))

        o.insert_object_at_coordinates(pts[1], 3)

        self.assertEqual(3, o.find_object_by_coordinates(pts[1]))

    def test_oct_tree_nearest(self):
        pts = [[0.5002720342505129, 0.049999999999999996, -0.08501700857389402],
               [0.2645697738549972, -0.35824829046386303, 0.2483163247594392]]
        find_pts = [[0.5002720342506, 0.049999999999999996, -0.08501700857389402],
                    [0.2645697738549972, -0.35824829046386303, 0.24831632475944]]

        o = Octree()
        o.insert_object_at_coordinates(pts[0], 1)
        o.insert_object_at_coordinates(pts[1], 2)

        self.assertEqual(1, o.find_nearest_object_by_coordinates(find_pts[0]))
        self.assertEqual(2, o.find_nearest_object_by_coordinates(find_pts[1]))


if __name__ == "__main__":
    unittest.main()
